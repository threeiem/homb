#!/bin/bash
################################################################################
# Bash Library
#
# This file contains the library of functions that are called by homb's other
# files.
#
################################################################################

################################################################################
#
# test_symlink(FILENAME [TARGET])
#
# Checks for the symbolic link FILENAME to see if it is valid or not. If there 
# is a TARGET path string passed then testlink will test to see if the link is a
# link and if it links to the TARGET path.
#
################################################################################
test_symlink() {

  local link=$1
  local target=$2

  if [ "$target" != "" ]; then
  
    if [ "$(readlink $link)" != "$target" ]; then 

      echo "$link -/-> $target"
      return 1

    else

      echo "$link ---> $target"

    fi

  fi

  if [  -L "$link" ]; then

    if [ -e "$link" ]; then 
 
      echo "$link is good."
      return 0

    else

      echo "$link is a dead link."
      return 1

    fi

  else

    echo "$link is not a link."
    return 1

  fi

}


trim() {
  local input="$*"

  input="${input#"${input%%[![:space:]]*}"}"   # Trim leading whitespace 
  input="${input%"${input##*[![:space:]]}"}"   # Trim trailing whitespace 
  echo -n "$input"
}


################################################################################
#
# interactive
#
# Check to see if the shell is interactive or not.  Returns a 1 if the shell is
# not a login/interactive shell.
#
################################################################################
interactive() {

  if [ "${PS1}" ]; then

    echo "Interactive"
    return 0

  else

    return 1

  fi

}


################################################################################
# 
# colors256
#
# Displays the colors that are available in a few loops. This is to get see a 
# test pallette for testing. This came directly from this link...
# http://mywiki.wooledge.org/BashFAQ/037 (thanks!)
#
################################################################################
colors256() {
        local c i j

        printf "Standard 16 colors\n"
        for ((c = 0; c < 17; c++)); do
                printf "|%s%3d%s" "$(tput setaf "$c")" "$c" "$(tput sgr0)"
        done
        printf "|\n\n"

        printf "Colors 16 to 231 for 256 colors\n"
        for ((c = 16, i = j = 0; c < 232; c++, i++)); do
                printf "|"
                ((i > 5 && (i = 0, ++j))) && printf " |"
                ((j > 5 && (j = 0, 1)))   && printf "\b \n|"
                printf "%s%3d%s" "$(tput setaf "$c")" "$c" "$(tput sgr0)"
        done
        printf "|\n\n"

        printf "Greyscale 232 to 255 for 256 colors\n"
        for ((; c < 256; c++)); do
                printf "|%s%3d%s" "$(tput setaf "$c")" "$c" "$(tput sgr0)"
        done
        printf "|\n"
}


################################################################################
#
# Sizzle
#
# Make a string have some pizzaz. This function takes a string and will simply
# repeat it, but has a flag for color and weight.
#
#   ex.) sizzle "Make text sizzle." Red Bold Bright
#
# This would print out the string Make my string sizzle in the color red and 
# bold and the higher intensity color of Red. 
#
################################################################################
sizzle() {

  # User Input
  local text=$1

  # Attribute Count
  local attribs=$(($#-1))

  for attribute in "${@:2}"; do

    case "${attribute}" in

      Reset|reset|me)
        # [RESET]
        text="${text}${Reset}"
        ;;

      Bold|bold|md)
        # [Style:Bold]
        text="${Bold}${text}${Reset}"
        ;;

      Intense|Standout|standout|strong|intense|so)
        # [Style:Stand-out]
        text="${Intense}${text}${Intense_Stop}${Reset}"
        ;;
      Blink|blink|mb)
        # [Style:Blink]
        text="${Blink}${text}${Reset}"
        ;;

      Black|black|0)
        # [Color:Black]
        text="${Black}${text}${Reset}"
        ;;

      White|white|7)
        # [Color:White]
        text="${White}${text}${Reset}"
        ;;

      Red|red|1)
        # [Color:Red]
        text="${Red}${text}${Reset}"
        ;;

      Green|green|3)
        # [Color:Green]
        text="${Green}${text}${Reset}"
        ;;

      Yellow|yellow|3)
        # [Color:Yellow]
        text="${Yellow}${text}${Reset}"
        ;;

      Blue|blue|4)
        # [Color:Blue]
        text="${Blue}${text}${Reset}"
        ;;

      Purple|purple|5)
        # [Color:Purple]
        text="${Purple}${text}${Reset}"
        ;;

      Cyan|cyan|6)
        # [Color:Cyan]
        text="${Cyan}${text}${Reset}"
        ;;

      *)
        # [Catch all]
        echo "${Reset}${text}${Reset}"
        return 0;
        ;;

    esac  

  done

  echo "${Reset}${text}${Reset}"
} 
